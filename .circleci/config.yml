version: 2
jobs:
  build:
    parallelism: 2
    working_directory: ~/circleci-test
    docker:
      - image: circleci/ruby:2.5.1-stretch-node-browsers
        environment:
          PGHOST: 127.0.0.1
          PGUSER: postgres
          RAILS_ENV: test
      - image: circleci/postgres:9.5-alpine-postgis-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: circleci-test
          POSTGRES_PASSWORD: ""
      - image: redis
    steps:
      - checkout
      - run: sudo apt-get install curl ca-certificates gnupg && sudo update-ca-certificates
      - run: curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/apt.postgresql.org.gpg >/dev/null 
      - run: sudo bash -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main" >> /etc/apt/sources.list.d/pgdg.list'
      - run: sudo apt-get update
      # - run: sudo apt-get -y --allow-unauthenticated install postgresql-client-12
      # - run: |
      #     echo "deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main" | sudo tee -a /etc/apt/sources.list \
      #     && wget -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add ACCC4CF8.asc \
      #     && sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F76221572C52609D 749D6EEC0353B12C

      # Install System Dependencies
      - run: sudo apt-get update -qq && sudo apt-get install -y build-essential postgresql-client-9.5

      # Restore bundle cache
      - type: cache-restore
        name: Restore bundle cache
        key: guidevine-{{ checksum "Gemfile.lock" }}

      # Bundle install dependencies
      - run: gem install bundler -v 1.17.3
      - run: bundle install --path vendor/bundle

      # Store bundle cache
      - type: cache-save
        name: Store bundle cache
        key: guidevine-{{ checksum "Gemfile.lock" }}
        paths:
          - vendor/bundle

      - run:
          name: download dependencies
          command: |
            if [ ! -d node_modules -o ! -d resources/components ]; then
              set -exu
              npm install yarn
              yarn install
            fi

      # Wait for DB
      - run: dockerize -wait tcp://localhost:5432 -timeout 1m

      # Database setup
      - run: mv config/database.ci.yml config/database.yml
      - run: bundle exec rake circleci:check_spec_files
      - run: bundle exec rubocop
      - run: ./node_modules/.bin/eslint app/javascript
      - run: bundle exec rake db:create
      - run: bundle exec rake db:migrate
      - run: bundle exec rake assets:precompile

      - run:
          name: "Run capybara-webmock proxy server at 9292"
          command: echo "`bundle show capybara-webmock`/lib/capybara/webmock/config.ru" | xargs bundle exec rackup
          background: true

      # Run rspec in parallel
      - type: shell
        command: |
          bundle exec rspec --profile 10 \
                            --format RspecJunitFormatter \
                            --out /tmp/test-results/rspec.xml \
                            --format progress \
                            $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      # Save artifacts
      - store_artifacts:
          path: tmp/capybara

